<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="example_8hpp" kind="file" language="C++">
    <compoundname>example.hpp</compoundname>
    <innerclass refid="classFoo" prot="public">Foo</innerclass>
    <innerclass refid="unionUnionExample" prot="public">UnionExample</innerclass>
    <innerclass refid="structAStruct" prot="public">AStruct</innerclass>
    <innerclass refid="classTemplateClass" prot="public">TemplateClass</innerclass>
    <innernamespace refid="namespaceexample">example</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="example_8hpp_1a598a3330b3c21701223ee0ca14316eca" prot="public" static="no">
        <name>PI</name>
        <initializer>3.14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Value of PI. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="49" column="9" bodyfile="example.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="example_8hpp_1a7de082eb27200b447e363a480dcaeb78" prot="public" static="no" strong="yes">
        <type></type>
        <name>Spam</name>
        <enumvalue id="example_8hpp_1a7de082eb27200b447e363a480dcaeb78ac7bcabf6b98a220f2f4888a18d01568d" prot="public">
          <name>Value_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Value 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="example_8hpp_1a7de082eb27200b447e363a480dcaeb78add358c74cb9cb897424838fbcb69c933" prot="public">
          <name>Value_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Value 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="example_8hpp_1a7de082eb27200b447e363a480dcaeb78a62001aaececf78bf9dfa52364eeb9d82" prot="public">
          <name>Value_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Value 3. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An enum. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="39" column="16" bodyfile="example.hpp" bodystart="39" bodyend="46"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="example_8hpp_1a11d147c64891830c9e79b3315b1b2e21" prot="public" static="no">
        <type>double</type>
        <definition>typedef double real</definition>
        <argsstring></argsstring>
        <name>real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set floating point precision. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="52" column="16" bodyfile="example.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="example_8hpp_1a14bcd2d544b22300bba3863251393e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int foo</definition>
        <argsstring>()</argsstring>
        <name>foo</name>
        <briefdescription>
<para><ref refid="classFoo" kindref="compound">Foo</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="6" column="5" declfile="example.hpp" declline="6" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="example_8hpp_1a456d32290621bf843d009220e88ce107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T template_func</definition>
        <argsstring>(T a, T b)</argsstring>
        <name>template_func</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A template function.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>A typename. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="75" column="3" bodyfile="example.hpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="example_8hpp_1a3abd97ba04854a2688589328f106975a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int func_overload</definition>
        <argsstring>(void)</argsstring>
        <name>func_overload</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Argument is a void. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="117" column="5" declfile="example.hpp" declline="117" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="example_8hpp_1a5d1851511c174c9f5bdb3178075c5d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int func_overload</definition>
        <argsstring>(int a)</argsstring>
        <name>func_overload</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Argument is an integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="120" column="5" declfile="example.hpp" declline="120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="example_8hpp_1a02af96d58a01ac98920fab31486058ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int func_overload</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>func_overload</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Arguments are two real numbers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="123" column="5" declfile="example.hpp" declline="123" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="example_8hpp_1a629bfe7e9bddbebb8f0dd4a58de7d0b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int func_overload</definition>
        <argsstring>(const double &amp;x)</argsstring>
        <name>func_overload</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Argument is a constant l-value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="126" column="5" declfile="example.hpp" declline="126" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="example_8hpp_1a9ab4996e7cf0068451171d7df8d8a28d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int func_overload</definition>
        <argsstring>(double &amp;&amp;x)</argsstring>
        <name>func_overload</name>
        <param>
          <type>double &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Argument is an r-value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="129" column="5" declfile="example.hpp" declline="129" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="example_8hpp_1a5148fdc24dd6e5312e83966fa03db1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int func_overload</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;v)</argsstring>
        <name>func_overload</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Argument is a template std::vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example.hpp" line="132" column="5" declfile="example.hpp" declline="132" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Header<sp/>file<sp/>to<sp/>test<sp/>features<sp/>of<sp/>sphinx-doxysummary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Without<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="example_8hpp_1a14bcd2d544b22300bba3863251393e0f" kindref="member">foo</ref>();</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="classFoo" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFoo" kindref="compound">Foo</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12" refid="classFoo_1a96ef17e84655cda38bbdf9f227e6c7a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classFoo_1a96ef17e84655cda38bbdf9f227e6c7a2" kindref="member">a_public_attribute</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classFoo_1a62da672680b5f34c82b80e0c86780560" kindref="member">a_public_method</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classFoo_1a08f07880cb0dc007e5b8077912384ae4" kindref="member">compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classFoo" kindref="compound">Foo</ref><sp/>&amp;<sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classFoo" kindref="compound">Foo</ref><sp/>&amp;<sp/>right);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classFoo" kindref="compound">Foo</ref><sp/><ref refid="classFoo_1a297814b399b195ca032e0a34e098bc5e" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classFoo" kindref="compound">Foo</ref><sp/>&amp;<sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classFoo" kindref="compound">Foo</ref><sp/>&amp;<sp/>right);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31" refid="classFoo_1aaa3c01d24e4cc3b0a4e5077051737503" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classFoo_1aaa3c01d24e4cc3b0a4e5077051737503" kindref="member">a_private_attribute</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classFoo_1a25f55b6f5daae708e45d72b96f3b8ea6" kindref="member">a_private_method</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="example_8hpp_1a7de082eb27200b447e363a480dcaeb78" refkind="member"><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="example_8hpp_1a7de082eb27200b447e363a480dcaeb78" kindref="member">Spam</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="example_8hpp_1a7de082eb27200b447e363a480dcaeb78ac7bcabf6b98a220f2f4888a18d01568d" kindref="member">Value_1</ref>,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="example_8hpp_1a7de082eb27200b447e363a480dcaeb78add358c74cb9cb897424838fbcb69c933" kindref="member">Value_2</ref>,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="example_8hpp_1a7de082eb27200b447e363a480dcaeb78a62001aaececf78bf9dfa52364eeb9d82" kindref="member">Value_3</ref></highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="example_8hpp_1a598a3330b3c21701223ee0ca14316eca" refkind="member"><highlight class="preprocessor">#define<sp/>PI<sp/>3.14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="example_8hpp_1a11d147c64891830c9e79b3315b1b2e21" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="example_8hpp_1a11d147c64891830c9e79b3315b1b2e21" kindref="member">real</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="unionUnionExample" refkind="compound"><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionUnionExample" kindref="compound">UnionExample</ref><sp/>{</highlight></codeline>
<codeline lineno="56" refid="unionUnionExample_1a8892fcc826b0e5fc6752f6cfaff59f35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="unionUnionExample_1a8892fcc826b0e5fc6752f6cfaff59f35" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="57" refid="unionUnionExample_1a23fb88bc15fc4416bb9a2a04d3e80107" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="unionUnionExample_1a23fb88bc15fc4416bb9a2a04d3e80107" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structAStruct" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structAStruct" kindref="compound">AStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="63" refid="structAStruct_1a698ae3679e8ea5b9ce4faf6eda4cfb0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structAStruct_1a698ae3679e8ea5b9ce4faf6eda4cfb0c" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="65" refid="structAStruct_1ae3f02e5790315cd4144844b0c78a1255" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structAStruct_1ae3f02e5790315cd4144844b0c78a1255" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="75" refid="example_8hpp_1a456d32290621bf843d009220e88ce107" refkind="member"><highlight class="normal">T<sp/><ref refid="example_8hpp_1a456d32290621bf843d009220e88ce107" kindref="member">template_func</ref>(T<sp/>a,<sp/>T<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a+b;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="83" refid="classTemplateClass" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTemplateClass" kindref="compound">TemplateClass</ref><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="90" refid="classTemplateClass_1a7a609a5ee40c4396a52765018a52c46b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTemplateClass_1a7a609a5ee40c4396a52765018a52c46b" kindref="member">Abc</ref>(T<sp/>a,<sp/>T<sp/>b,<sp/>T<sp/>c)<sp/>:<sp/><ref refid="classTemplateClass_1ade1db382d02a7bccc3af17730a3d6927" kindref="member">a_</ref>(a),<sp/><ref refid="classTemplateClass_1a5b16159af48688ab110c4c3710306ebe" kindref="member">b_</ref>(b),<sp/><ref refid="classTemplateClass_1a655cb3fd3cd9c350230ca8e7690540ed" kindref="member">c_</ref>(c)<sp/>{}</highlight></codeline>
<codeline lineno="92" refid="classTemplateClass_1aaaa0a4bd26e6580cc38292bff36ae1c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTemplateClass_1aaaa0a4bd26e6580cc38292bff36ae1c6" kindref="member">~Abc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{std::printf(</highlight><highlight class="stringliteral">&quot;Free<sp/>Abc<sp/>object.\n&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96" refid="classTemplateClass_1ade1db382d02a7bccc3af17730a3d6927" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classTemplateClass_1ade1db382d02a7bccc3af17730a3d6927" kindref="member">a_</ref>;</highlight></codeline>
<codeline lineno="98" refid="classTemplateClass_1a5b16159af48688ab110c4c3710306ebe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classTemplateClass_1a5b16159af48688ab110c4c3710306ebe" kindref="member">b_</ref>;</highlight></codeline>
<codeline lineno="100" refid="classTemplateClass_1a655cb3fd3cd9c350230ca8e7690540ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classTemplateClass_1a655cb3fd3cd9c350230ca8e7690540ed" kindref="member">c_</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="namespaceexample" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceexample" kindref="compound">example</ref><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceexample_1a7bc18b09113d1488ba83f323be93b115" kindref="member">scoped_variable</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceexample_1aa45c11a7f176a876611a6b2900f3a718" kindref="member">scopred_function</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceexample_1ac7bfd6454fc8e15956f9f289063449bc" kindref="member">a_long_named_function_for_testing_alias</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="example_8hpp_1a3abd97ba04854a2688589328f106975a" kindref="member">func_overload</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="example_8hpp_1a3abd97ba04854a2688589328f106975a" kindref="member">func_overload</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="example_8hpp_1a3abd97ba04854a2688589328f106975a" kindref="member">func_overload</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="example_8hpp_1a3abd97ba04854a2688589328f106975a" kindref="member">func_overload</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="example_8hpp_1a3abd97ba04854a2688589328f106975a" kindref="member">func_overload</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>x);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="example_8hpp_1a3abd97ba04854a2688589328f106975a" kindref="member">func_overload</ref>(std::vector&lt;double&gt;<sp/>&amp;<sp/>v);</highlight></codeline>
    </programlisting>
    <location file="example.hpp"/>
  </compounddef>
</doxygen>
